/* tslint:disable */
/* eslint-disable */
/**
 * Ardhangini Backend Api
 * Ardhangini api to be consumed from Mobile Application, Frontend and Admin Application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CartDetailsResponse
 */
export interface CartDetailsResponse {
    /**
     * 
     * @type {string}
     * @memberof CartDetailsResponse
     */
    'cartId': string;
    /**
     * 
     * @type {string}
     * @memberof CartDetailsResponse
     */
    'userId': string;
    /**
     * 
     * @type {Array<CartLineItemResponse>}
     * @memberof CartDetailsResponse
     */
    'cartLineItems': Array<CartLineItemResponse>;
    /**
     * 
     * @type {number}
     * @memberof CartDetailsResponse
     */
    'actualTotalPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CartDetailsResponse
     */
    'finalTotalPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CartDetailsResponse
     */
    'totalSgst': number;
    /**
     * 
     * @type {number}
     * @memberof CartDetailsResponse
     */
    'totalCgst': number;
    /**
     * 
     * @type {number}
     * @memberof CartDetailsResponse
     */
    'shipping': number;
}
/**
 * 
 * @export
 * @interface CartLineItemDto
 */
export interface CartLineItemDto {
    /**
     * 
     * @type {string}
     * @memberof CartLineItemDto
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof CartLineItemDto
     */
    'typeId': string;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CartLineItemResponse
 */
export interface CartLineItemResponse {
    /**
     * 
     * @type {string}
     * @memberof CartLineItemResponse
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof CartLineItemResponse
     */
    'typeId': string;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof CartLineItemResponse
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof CartLineItemResponse
     */
    'productThumbnail': string;
    /**
     * 
     * @type {string}
     * @memberof CartLineItemResponse
     */
    'productName': string;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'actualPricePerItem': number;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'finalPricePerItem': number;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'actualTotalPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'finalTotalPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'totalSgst': number;
    /**
     * 
     * @type {number}
     * @memberof CartLineItemResponse
     */
    'totalCgst': number;
}
/**
 * 
 * @export
 * @interface CartUpdateDto
 */
export interface CartUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof CartUpdateDto
     */
    'userId': string;
    /**
     * 
     * @type {Array<CartLineItemDto>}
     * @memberof CartUpdateDto
     */
    'lineItems': Array<CartLineItemDto>;
}
/**
 * 
 * @export
 * @interface CategoryEntity
 */
export interface CategoryEntity {
    /**
     * 
     * @type {string}
     * @memberof CategoryEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryEntity
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryEntity
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateFabricDto
 */
export interface CreateFabricDto {
    /**
     * 
     * @type {string}
     * @memberof CreateFabricDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFabricDto
     */
    'fabricName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFabricDto
     */
    'fabricDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFabricDto
     */
    'washCare'?: string;
}
/**
 * 
 * @export
 * @interface CreateManufacturerDto
 */
export interface CreateManufacturerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateManufacturerDto
     */
    'origin': string;
    /**
     * 
     * @type {string}
     * @memberof CreateManufacturerDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateManufacturerDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'orderType': CreateOrderDtoOrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'deliveryAddress': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'billingAddress': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDto
     */
    'paymentMethod': CreateOrderDtoPaymentMethodEnum;
}

export const CreateOrderDtoOrderTypeEnum = {
    Cashondelivery: 'cashondelivery',
    Onlinepayment: 'onlinepayment'
} as const;

export type CreateOrderDtoOrderTypeEnum = typeof CreateOrderDtoOrderTypeEnum[keyof typeof CreateOrderDtoOrderTypeEnum];
export const CreateOrderDtoPaymentMethodEnum = {
    Cod: 'cod',
    CreditCard: 'credit card',
    DebitCard: 'debit card',
    Upi: 'upi',
    Netbanking: 'netbanking',
    OnlinePayment: 'online payment'
} as const;

export type CreateOrderDtoPaymentMethodEnum = typeof CreateOrderDtoPaymentMethodEnum[keyof typeof CreateOrderDtoPaymentMethodEnum];

/**
 * 
 * @export
 * @interface CreateProductCollectionDto
 */
export interface CreateProductCollectionDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductCollectionDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductCollectionDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductCollectionDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateProductColorDto
 */
export interface CreateProductColorDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductColorDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductColorDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'subCategoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'manufacturerId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'returnExchangePolicy': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'skuid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'productName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'productDescription': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'offerprice': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'actualprice': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'isActive': boolean;
    /**
     * 
     * @type {CreateSareeDetailsDto}
     * @memberof CreateProductDto
     */
    'productDetails': CreateSareeDetailsDto;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'cgst': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'sgst': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'maxQuantityPerCart': number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'promoId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'isTrending': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'isBestSeller': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'isExclusive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'isShippable': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'collectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'colorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'occassionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'styleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'printId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'maxAllowedReturnDays': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'maxAllowedCancellationDays': number;
}
/**
 * 
 * @export
 * @interface CreateProductOccassionDto
 */
export interface CreateProductOccassionDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductOccassionDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductOccassionDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductOccassionDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateProductPrintDto
 */
export interface CreateProductPrintDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductPrintDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductPrintDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductPrintDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateProductResponseDto
 */
export interface CreateProductResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'subCategoryId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'manufacturerId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'returnExchangePolicy': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'skuid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'productName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'productDescription': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'offerprice': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'actualprice': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductResponseDto
     */
    'isActive': boolean;
    /**
     * 
     * @type {CreateSareeDetailsDto}
     * @memberof CreateProductResponseDto
     */
    'productDetails': CreateSareeDetailsDto;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'cgst': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'sgst': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'maxQuantityPerCart': number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'promoId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductResponseDto
     */
    'isTrending': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductResponseDto
     */
    'isBestSeller': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductResponseDto
     */
    'isExclusive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductResponseDto
     */
    'isShippable': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'collectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'colorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'occassionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'styleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductResponseDto
     */
    'printId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'maxAllowedReturnDays': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'maxAllowedCancellationDays': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'averageReview': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'numberOfReviews': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'currentPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'offerPrice': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'availableQuantity': number;
    /**
     * 
     * @type {number}
     * @memberof CreateProductResponseDto
     */
    'discountPercentage': number;
}
/**
 * 
 * @export
 * @interface CreateProductStyleDto
 */
export interface CreateProductStyleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductStyleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductStyleDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductStyleDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateProductTypeDto
 */
export interface CreateProductTypeDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductTypeDto
     */
    'name': CreateProductTypeDtoNameEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateProductTypeDto
     */
    'description'?: string;
}

export const CreateProductTypeDtoNameEnum = {
    Saree: 'saree'
} as const;

export type CreateProductTypeDtoNameEnum = typeof CreateProductTypeDtoNameEnum[keyof typeof CreateProductTypeDtoNameEnum];

/**
 * 
 * @export
 * @interface CreatePromoDto
 */
export interface CreatePromoDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePromoDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromoDto
     */
    'endDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromoDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePromoDto
     */
    'minimumOrderValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePromoDto
     */
    'discountPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePromoDto
     */
    'flatDiscount'?: number;
}
/**
 * 
 * @export
 * @interface CreateSareeDetailsDto
 */
export interface CreateSareeDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSareeDetailsDto
     */
    'fabricDetailsId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateSareeDetailsDto
     */
    'length': number;
    /**
     * 
     * @type {number}
     * @memberof CreateSareeDetailsDto
     */
    'width': number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateSareeDetailsDto
     */
    'isBlousePieceIncluded': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateSareeDetailsDto
     */
    'blouseDescription': string;
}
/**
 * 
 * @export
 * @interface CreateSubcategoryDto
 */
export interface CreateSubcategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSubcategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubcategoryDto
     */
    'categoryid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSubcategoryDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface DeliveryAddressEntity
 */
export interface DeliveryAddressEntity {
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'addressLine1': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'addressLine2': string;
    /**
     * 
     * @type {number}
     * @memberof DeliveryAddressEntity
     */
    'pin': number;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'town': string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryAddressEntity
     */
    'mobileNumber': string;
}
/**
 * 
 * @export
 * @interface EmailAuthDto
 */
export interface EmailAuthDto {
    /**
     * 
     * @type {string}
     * @memberof EmailAuthDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EmailAuthDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface FabricDetailsEntity
 */
export interface FabricDetailsEntity {
    /**
     * 
     * @type {string}
     * @memberof FabricDetailsEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FabricDetailsEntity
     */
    'fabricName': string;
    /**
     * 
     * @type {string}
     * @memberof FabricDetailsEntity
     */
    'fabricDescription': string;
    /**
     * 
     * @type {string}
     * @memberof FabricDetailsEntity
     */
    'washCare': string;
}
/**
 * 
 * @export
 * @interface ManufacturerEntity
 */
export interface ManufacturerEntity {
    /**
     * 
     * @type {string}
     * @memberof ManufacturerEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManufacturerEntity
     */
    'origin': string;
    /**
     * 
     * @type {string}
     * @memberof ManufacturerEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ManufacturerEntity
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface OrderLineItemResponse
 */
export interface OrderLineItemResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemResponse
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemResponse
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemResponse
     */
    'productName': string;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemResponse
     */
    'productThumbnail': string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'actualPrice': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'offerPrice': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'promoDiscount': number;
    /**
     * 
     * @type {string}
     * @memberof OrderLineItemResponse
     */
    'promoDescription': string;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'totalSgst': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'totalCgst': number;
    /**
     * 
     * @type {number}
     * @memberof OrderLineItemResponse
     */
    'finalTotalPrice': number;
}
/**
 * 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'cartId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'userEmail': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'userMobile': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderType': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'OrderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderCancellationType': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'orderCancellationReason': string;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'totalActualPrice': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'totalFinalPrice': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'totalCgst': number;
    /**
     * 
     * @type {number}
     * @memberof OrderResponse
     */
    'totalSgst': number;
    /**
     * 
     * @type {Array<OrderLineItemResponse>}
     * @memberof OrderResponse
     */
    'cartLineItems': Array<OrderLineItemResponse>;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'billingAddress': string;
    /**
     * 
     * @type {string}
     * @memberof OrderResponse
     */
    'shippingAddress': string;
    /**
     * 
     * @type {PaymentEntity}
     * @memberof OrderResponse
     */
    'paymentInfo': PaymentEntity;
    /**
     * 
     * @type {Array<OrderTimeLineEntity>}
     * @memberof OrderResponse
     */
    'orderTimeLine': Array<OrderTimeLineEntity>;
}
/**
 * 
 * @export
 * @interface OrderTimeLineEntity
 */
export interface OrderTimeLineEntity {
    /**
     * 
     * @type {string}
     * @memberof OrderTimeLineEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderTimeLineEntity
     */
    'eventDate': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTimeLineEntity
     */
    'eventType': string;
    /**
     * 
     * @type {string}
     * @memberof OrderTimeLineEntity
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface PaymentEntity
 */
export interface PaymentEntity {
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentEntity
     */
    'totalAmount': number;
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'paymentMethod': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'gatewayOrderId': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'gatewayPaymentId': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEntity
     */
    'failureReason': string;
}
/**
 * 
 * @export
 * @interface ProductCollectionEntity
 */
export interface ProductCollectionEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductCollectionEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCollectionEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCollectionEntity
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ProductColorEntity
 */
export interface ProductColorEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductColorEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductColorEntity
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOccassionEntity
 */
export interface ProductOccassionEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductOccassionEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOccassionEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOccassionEntity
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ProductPrintsEntity
 */
export interface ProductPrintsEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductPrintsEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPrintsEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductPrintsEntity
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ProductSnapshotDto
 */
export interface ProductSnapshotDto {
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'productid': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'producttype': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'subcategory': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'skuid': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'productname': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'productdescription': string;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'offerprice': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'actualprice': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'availableQuantity': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'averageReview': number;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotDto
     */
    'return_exchange_policy': string;
    /**
     * 
     * @type {SareeDetailsDto}
     * @memberof ProductSnapshotDto
     */
    'productDetails': SareeDetailsDto;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'maxQuantityPerCart': number;
    /**
     * 
     * @type {PromoDetailsEntity}
     * @memberof ProductSnapshotDto
     */
    'promoDetails'?: PromoDetailsEntity;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotDto
     */
    'isTrending': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotDto
     */
    'isBestSeller': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotDto
     */
    'isNew': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotDto
     */
    'isExclusive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotDto
     */
    'isShippable': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'noOfReviews': number;
    /**
     * 
     * @type {ProductCollectionEntity}
     * @memberof ProductSnapshotDto
     */
    'productCollection': ProductCollectionEntity;
    /**
     * 
     * @type {ProductStyleEntity}
     * @memberof ProductSnapshotDto
     */
    'productStyle': ProductStyleEntity;
    /**
     * 
     * @type {ProductOccassionEntity}
     * @memberof ProductSnapshotDto
     */
    'productOccassion': ProductOccassionEntity;
    /**
     * 
     * @type {ProductColorEntity}
     * @memberof ProductSnapshotDto
     */
    'productColour': ProductColorEntity;
    /**
     * 
     * @type {ProductPrintsEntity}
     * @memberof ProductSnapshotDto
     */
    'productPrint': ProductPrintsEntity;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'maxAllowedReturnDays': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotDto
     */
    'maxAllowedCancellationDays': number;
}
/**
 * 
 * @export
 * @interface ProductSnapshotWithUserDto
 */
export interface ProductSnapshotWithUserDto {
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'productid': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'producttype': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'productTypeId': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'subcategory': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'skuid': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'productname': string;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'productdescription': string;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'offerprice': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'actualprice': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'availableQuantity': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'averageReview': number;
    /**
     * 
     * @type {string}
     * @memberof ProductSnapshotWithUserDto
     */
    'return_exchange_policy': string;
    /**
     * 
     * @type {SareeDetailsDto}
     * @memberof ProductSnapshotWithUserDto
     */
    'productDetails': SareeDetailsDto;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'maxQuantityPerCart': number;
    /**
     * 
     * @type {PromoDetailsEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'promoDetails'?: PromoDetailsEntity;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isTrending': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isBestSeller': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isNew': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isExclusive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isShippable': boolean;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'noOfReviews': number;
    /**
     * 
     * @type {ProductCollectionEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'productCollection': ProductCollectionEntity;
    /**
     * 
     * @type {ProductStyleEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'productStyle': ProductStyleEntity;
    /**
     * 
     * @type {ProductOccassionEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'productOccassion': ProductOccassionEntity;
    /**
     * 
     * @type {ProductColorEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'productColour': ProductColorEntity;
    /**
     * 
     * @type {ProductPrintsEntity}
     * @memberof ProductSnapshotWithUserDto
     */
    'productPrint': ProductPrintsEntity;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'maxAllowedReturnDays': number;
    /**
     * 
     * @type {number}
     * @memberof ProductSnapshotWithUserDto
     */
    'maxAllowedCancellationDays': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isCarted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductSnapshotWithUserDto
     */
    'isWishListed': boolean;
}
/**
 * 
 * @export
 * @interface ProductStyleEntity
 */
export interface ProductStyleEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductStyleEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductStyleEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductStyleEntity
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ProductTypeEntity
 */
export interface ProductTypeEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductTypeEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTypeEntity
     */
    'name': ProductTypeEntityNameEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ProductTypeEntity
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductTypeEntity
     */
    'description': string;
}

export const ProductTypeEntityNameEnum = {
    Saree: 'saree'
} as const;

export type ProductTypeEntityNameEnum = typeof ProductTypeEntityNameEnum[keyof typeof ProductTypeEntityNameEnum];

/**
 * 
 * @export
 * @interface PromoDetailsEntity
 */
export interface PromoDetailsEntity {
    /**
     * 
     * @type {string}
     * @memberof PromoDetailsEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromoDetailsEntity
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof PromoDetailsEntity
     */
    'endDate': string;
    /**
     * 
     * @type {string}
     * @memberof PromoDetailsEntity
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PromoDetailsEntity
     */
    'minimumOrderValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromoDetailsEntity
     */
    'discountPercentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromoDetailsEntity
     */
    'flatDiscount'?: number;
}
/**
 * 
 * @export
 * @interface RegisterEmailPasswordDto
 */
export interface RegisterEmailPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterEmailPasswordDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterEmailPasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterEmailPasswordDto
     */
    'repeatPassword': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterEmailPasswordDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterEmailPasswordDto
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface SareeDetailsDto
 */
export interface SareeDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsDto
     */
    'fabricname': string;
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsDto
     */
    'fabricDescription': string;
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsDto
     */
    'washcare': string;
    /**
     * 
     * @type {number}
     * @memberof SareeDetailsDto
     */
    'length': number;
    /**
     * 
     * @type {number}
     * @memberof SareeDetailsDto
     */
    'width': number;
    /**
     * 
     * @type {boolean}
     * @memberof SareeDetailsDto
     */
    'blouse_piece': boolean;
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsDto
     */
    'blouse_desc': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SareeDetailsDto
     */
    'sareeImages': Array<string>;
}
/**
 * 
 * @export
 * @interface SareeDetailsEntity
 */
export interface SareeDetailsEntity {
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsEntity
     */
    'id'?: string;
    /**
     * 
     * @type {FabricDetailsEntity}
     * @memberof SareeDetailsEntity
     */
    'fabricDetails': FabricDetailsEntity;
    /**
     * 
     * @type {number}
     * @memberof SareeDetailsEntity
     */
    'length': number;
    /**
     * 
     * @type {number}
     * @memberof SareeDetailsEntity
     */
    'width': number;
    /**
     * 
     * @type {boolean}
     * @memberof SareeDetailsEntity
     */
    'blousePieceIncluded': boolean;
    /**
     * 
     * @type {string}
     * @memberof SareeDetailsEntity
     */
    'blouse_desc': string;
}
/**
 * 
 * @export
 * @interface SareeEntity
 */
export interface SareeEntity {
    /**
     * 
     * @type {string}
     * @memberof SareeEntity
     */
    'id'?: string;
    /**
     * 
     * @type {CategoryEntity}
     * @memberof SareeEntity
     */
    'category': CategoryEntity;
    /**
     * 
     * @type {SubcategoryEntity}
     * @memberof SareeEntity
     */
    'subCategory': SubcategoryEntity;
    /**
     * 
     * @type {ProductTypeEntity}
     * @memberof SareeEntity
     */
    'productType': ProductTypeEntity;
    /**
     * 
     * @type {ManufacturerEntity}
     * @memberof SareeEntity
     */
    'manufacturer': ManufacturerEntity;
    /**
     * 
     * @type {string}
     * @memberof SareeEntity
     */
    'skuid': string;
    /**
     * 
     * @type {string}
     * @memberof SareeEntity
     */
    'productName': string;
    /**
     * 
     * @type {string}
     * @memberof SareeEntity
     */
    'productDescription': string;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'averageReview': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'numberOfReviews': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'offerprice': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'actualprice': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'available_qty': number;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof SareeEntity
     */
    'returnExchangePolicy': string;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'cgst': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'sgst': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'maxQuantityPerCart': number;
    /**
     * 
     * @type {PromoDetailsEntity}
     * @memberof SareeEntity
     */
    'promoDetails': PromoDetailsEntity;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isNew': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isTrending': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isBestSeller': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isExclusive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SareeEntity
     */
    'isShippable': boolean;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'maxAllowedReturnDays': number;
    /**
     * 
     * @type {number}
     * @memberof SareeEntity
     */
    'maxAllowedCancellationDays': number;
    /**
     * 
     * @type {SareeDetailsEntity}
     * @memberof SareeEntity
     */
    'sareeDetails': SareeDetailsEntity;
    /**
     * 
     * @type {Array<SareeImageEntity>}
     * @memberof SareeEntity
     */
    'productImages': Array<SareeImageEntity>;
    /**
     * 
     * @type {ProductCollectionEntity}
     * @memberof SareeEntity
     */
    'collection': ProductCollectionEntity;
    /**
     * 
     * @type {ProductColorEntity}
     * @memberof SareeEntity
     */
    'colour': ProductColorEntity;
    /**
     * 
     * @type {ProductPrintsEntity}
     * @memberof SareeEntity
     */
    'print': ProductPrintsEntity;
    /**
     * 
     * @type {ProductOccassionEntity}
     * @memberof SareeEntity
     */
    'occassion': ProductOccassionEntity;
    /**
     * 
     * @type {ProductStyleEntity}
     * @memberof SareeEntity
     */
    'style': ProductStyleEntity;
}
/**
 * 
 * @export
 * @interface SareeFilter
 */
export interface SareeFilter {
    /**
     * 
     * @type {string}
     * @memberof SareeFilter
     */
    'filterType': SareeFilterFilterTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof SareeFilter
     */
    'minValue'?: object;
    /**
     * 
     * @type {object}
     * @memberof SareeFilter
     */
    'maxValue'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof SareeFilter
     */
    'values'?: Array<string>;
}

export const SareeFilterFilterTypeEnum = {
    None: 'none',
    Category: 'category',
    Subcategory: 'subcategory',
    Price: 'price',
    Fabric: 'fabric',
    Collection: 'collection',
    Color: 'color',
    Style: 'style',
    Print: 'print',
    Exclusive: 'exclusive',
    Occassion: 'occassion',
    Bestseller: 'bestseller',
    Trending: 'trending',
    Shippable: 'shippable',
    New: 'new'
} as const;

export type SareeFilterFilterTypeEnum = typeof SareeFilterFilterTypeEnum[keyof typeof SareeFilterFilterTypeEnum];

/**
 * 
 * @export
 * @interface SareeFilterDto
 */
export interface SareeFilterDto {
    /**
     * 
     * @type {string}
     * @memberof SareeFilterDto
     */
    'userId'?: string;
    /**
     * 
     * @type {Array<SareeFilter>}
     * @memberof SareeFilterDto
     */
    'filters'?: Array<SareeFilter>;
}
/**
 * 
 * @export
 * @interface SareeImageEntity
 */
export interface SareeImageEntity {
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'imageSource': string;
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'imageKey': string;
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'thumbnailSource': string;
    /**
     * 
     * @type {string}
     * @memberof SareeImageEntity
     */
    'thumbnailKey': string;
}
/**
 * 
 * @export
 * @interface SubcategoryEntity
 */
export interface SubcategoryEntity {
    /**
     * 
     * @type {string}
     * @memberof SubcategoryEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubcategoryEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SubcategoryEntity
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof SubcategoryEntity
     */
    'isActive': boolean;
    /**
     * 
     * @type {CategoryEntity}
     * @memberof SubcategoryEntity
     */
    'category': CategoryEntity;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface UpdateDeliveryAddressDto
 */
export interface UpdateDeliveryAddressDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'addressId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'addressLine1': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'addressLine2': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDeliveryAddressDto
     */
    'pin': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'town': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'mobileNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDeliveryAddressDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UpdateManufacturerDto
 */
export interface UpdateManufacturerDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateManufacturerDto
     */
    'origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManufacturerDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManufacturerDto
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface UpdateProductTypeDto
 */
export interface UpdateProductTypeDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductTypeDto
     */
    'name'?: UpdateProductTypeDtoNameEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductTypeDto
     */
    'description'?: string;
}

export const UpdateProductTypeDtoNameEnum = {
    Saree: 'saree'
} as const;

export type UpdateProductTypeDtoNameEnum = typeof UpdateProductTypeDtoNameEnum[keyof typeof UpdateProductTypeDtoNameEnum];

/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'userid': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'mobile': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'dob': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'sex': UpdateUserDtoSexEnum;
}

export const UpdateUserDtoSexEnum = {
    Male: 'male',
    Female: 'female',
    Other: 'other'
} as const;

export type UpdateUserDtoSexEnum = typeof UpdateUserDtoSexEnum[keyof typeof UpdateUserDtoSexEnum];

/**
 * 
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'dob': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'mobile': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'bio': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'accountStatus': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'blackListReason': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'sex': string;
}
/**
 * 
 * @export
 * @interface WishListDetailsResponse
 */
export interface WishListDetailsResponse {
    /**
     * 
     * @type {string}
     * @memberof WishListDetailsResponse
     */
    'wishListId': string;
    /**
     * 
     * @type {string}
     * @memberof WishListDetailsResponse
     */
    'userId': string;
    /**
     * 
     * @type {Array<WishListLineItemDto>}
     * @memberof WishListDetailsResponse
     */
    'lineItems': Array<WishListLineItemDto>;
}
/**
 * 
 * @export
 * @interface WishListLineItemDto
 */
export interface WishListLineItemDto {
    /**
     * 
     * @type {string}
     * @memberof WishListLineItemDto
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof WishListLineItemDto
     */
    'typeId': string;
}
/**
 * 
 * @export
 * @interface WishListUpdateDto
 */
export interface WishListUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof WishListUpdateDto
     */
    'userId': string;
    /**
     * 
     * @type {Array<WishListLineItemDto>}
     * @memberof WishListUpdateDto
     */
    'lineItems': Array<WishListLineItemDto>;
}

/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * AddToCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCart: async (cartUpdateDto: CartUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartUpdateDto' is not null or undefined
            assertParamExists('cartControllerAddToCart', 'cartUpdateDto', cartUpdateDto)
            const localVarPath = `/cart/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cart Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartByUserId: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cartControllerGetCartByUserId', 'userId', userId)
            const localVarPath = `/cart/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RemoveFromCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCart: async (cartUpdateDto: CartUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartUpdateDto' is not null or undefined
            assertParamExists('cartControllerRemoveFromCart', 'cartUpdateDto', cartUpdateDto)
            const localVarPath = `/cart/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * AddToCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddToCart(cartUpdateDto: CartUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddToCart(cartUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddToCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cart Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCartByUserId(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCartByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetCartByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * RemoveFromCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerRemoveFromCart(cartUpdateDto: CartUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerRemoveFromCart(cartUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerRemoveFromCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * AddToCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCart(cartUpdateDto: CartUpdateDto, options?: any): AxiosPromise<CartDetailsResponse> {
            return localVarFp.cartControllerAddToCart(cartUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Cart Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartByUserId(userId: string, options?: any): AxiosPromise<CartDetailsResponse> {
            return localVarFp.cartControllerGetCartByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * RemoveFromCart
         * @summary 
         * @param {CartUpdateDto} cartUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCart(cartUpdateDto: CartUpdateDto, options?: any): AxiosPromise<CartDetailsResponse> {
            return localVarFp.cartControllerRemoveFromCart(cartUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * AddToCart
     * @summary 
     * @param {CartUpdateDto} cartUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerAddToCart(cartUpdateDto: CartUpdateDto, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddToCart(cartUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cart Response by userid
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerGetCartByUserId(userId: string, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCartByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RemoveFromCart
     * @summary 
     * @param {CartUpdateDto} cartUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public cartControllerRemoveFromCart(cartUpdateDto: CartUpdateDto, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerRemoveFromCart(cartUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Category
         * @summary 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate: async (createCategoryDto: CreateCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryDto' is not null or undefined
            assertParamExists('categoryControllerCreate', 'createCategoryDto', createCategoryDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Category with default pagination 10
         * @summary 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerFindOne', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerRemove', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Category.
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'body', body)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Category
         * @summary 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerCreate(createCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Category with default pagination 10
         * @summary 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindAll(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindAll(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Category.
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.categoryControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * Create Category
         * @summary 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerCreate(createCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * List Category with default pagination 10
         * @summary 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll(page?: number, limit?: number, options?: any): AxiosPromise<Array<CategoryEntity>> {
            return localVarFp.categoryControllerFindAll(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Category.
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.categoryControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * Create Category
     * @summary 
     * @param {CreateCategoryDto} createCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerCreate(createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Category with default pagination 10
     * @summary 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindAll(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindAll(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Category.
     * @summary 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerSareeDetailsApi - axios parameter creator
 * @export
 */
export const CustomerSareeDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List sarees with the filters
         * @summary 
         * @param {SareeFilterDto} sareeFilterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sareeControllerGetAll: async (sareeFilterDto: SareeFilterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sareeFilterDto' is not null or undefined
            assertParamExists('sareeControllerGetAll', 'sareeFilterDto', sareeFilterDto)
            const localVarPath = `/product-details/saree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sareeFilterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Related Sarees
         * @summary 
         * @param {string} sareeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sareeControllerGetRelatedSarees: async (sareeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sareeId' is not null or undefined
            assertParamExists('sareeControllerGetRelatedSarees', 'sareeId', sareeId)
            const localVarPath = `/product-details/realted-sarees/{sareeId}`
                .replace(`{${"sareeId"}}`, encodeURIComponent(String(sareeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerSareeDetailsApi - functional programming interface
 * @export
 */
export const CustomerSareeDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerSareeDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * List sarees with the filters
         * @summary 
         * @param {SareeFilterDto} sareeFilterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sareeControllerGetAll(sareeFilterDto: SareeFilterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductSnapshotWithUserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sareeControllerGetAll(sareeFilterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerSareeDetailsApi.sareeControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Related Sarees
         * @summary 
         * @param {string} sareeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sareeControllerGetRelatedSarees(sareeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductSnapshotWithUserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sareeControllerGetRelatedSarees(sareeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerSareeDetailsApi.sareeControllerGetRelatedSarees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerSareeDetailsApi - factory interface
 * @export
 */
export const CustomerSareeDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerSareeDetailsApiFp(configuration)
    return {
        /**
         * List sarees with the filters
         * @summary 
         * @param {SareeFilterDto} sareeFilterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sareeControllerGetAll(sareeFilterDto: SareeFilterDto, options?: any): AxiosPromise<Array<ProductSnapshotWithUserDto>> {
            return localVarFp.sareeControllerGetAll(sareeFilterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Related Sarees
         * @summary 
         * @param {string} sareeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sareeControllerGetRelatedSarees(sareeId: string, options?: any): AxiosPromise<Array<ProductSnapshotWithUserDto>> {
            return localVarFp.sareeControllerGetRelatedSarees(sareeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerSareeDetailsApi - object-oriented interface
 * @export
 * @class CustomerSareeDetailsApi
 * @extends {BaseAPI}
 */
export class CustomerSareeDetailsApi extends BaseAPI {
    /**
     * List sarees with the filters
     * @summary 
     * @param {SareeFilterDto} sareeFilterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSareeDetailsApi
     */
    public sareeControllerGetAll(sareeFilterDto: SareeFilterDto, options?: RawAxiosRequestConfig) {
        return CustomerSareeDetailsApiFp(this.configuration).sareeControllerGetAll(sareeFilterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Related Sarees
     * @summary 
     * @param {string} sareeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSareeDetailsApi
     */
    public sareeControllerGetRelatedSarees(sareeId: string, options?: RawAxiosRequestConfig) {
        return CustomerSareeDetailsApiFp(this.configuration).sareeControllerGetRelatedSarees(sareeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetApiInformation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('paymentControllerCreate', 'body', body)
            const localVarPath = `/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerFindOne', 'id', id)
            const localVarPath = `/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerRemove', 'id', id)
            const localVarPath = `/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('paymentControllerUpdate', 'body', body)
            const localVarPath = `/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('siteImageControllerCreate', 'body', body)
            const localVarPath = `/site-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/site-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('siteImageControllerFindOne', 'id', id)
            const localVarPath = `/site-image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('siteImageControllerRemove', 'id', id)
            const localVarPath = `/site-image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('siteImageControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('siteImageControllerUpdate', 'body', body)
            const localVarPath = `/site-image/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetApiInformation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetApiInformation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetApiInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteImageControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteImageControllerCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.siteImageControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteImageControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteImageControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.siteImageControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteImageControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteImageControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.siteImageControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteImageControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteImageControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.siteImageControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteImageControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteImageControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.siteImageControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetApiInformation(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetApiInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate(body: object, options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.paymentControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerCreate(body: object, options?: any): AxiosPromise<void> {
            return localVarFp.siteImageControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.siteImageControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.siteImageControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.siteImageControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteImageControllerUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.siteImageControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetApiInformation(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetApiInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentControllerCreate(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public siteImageControllerCreate(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).siteImageControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public siteImageControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).siteImageControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public siteImageControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).siteImageControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public siteImageControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).siteImageControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public siteImageControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).siteImageControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeliveryAddressApi - axios parameter creator
 * @export
 */
export const DeliveryAddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create or Update Delivery address
         * @summary 
         * @param {UpdateDeliveryAddressDto} updateDeliveryAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerCreateOrUpdate: async (updateDeliveryAddressDto: UpdateDeliveryAddressDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateDeliveryAddressDto' is not null or undefined
            assertParamExists('deliveryAddressControllerCreateOrUpdate', 'updateDeliveryAddressDto', updateDeliveryAddressDto)
            const localVarPath = `/delivery-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDeliveryAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all delivery addresses by userid for admin api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerGetAllByUserId: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deliveryAddressControllerGetAllByUserId', 'userId', userId)
            const localVarPath = `/delivery-address/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all delivery addresses by userid for user api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerGetAllByUserIdForUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deliveryAddressControllerGetAllByUserIdForUser', 'userId', userId)
            const localVarPath = `/delivery-address/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete delivery addresses by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryAddressControllerRemove', 'id', id)
            const localVarPath = `/delivery-address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryAddressApi - functional programming interface
 * @export
 */
export const DeliveryAddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryAddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Create or Update Delivery address
         * @summary 
         * @param {UpdateDeliveryAddressDto} updateDeliveryAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto: UpdateDeliveryAddressDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryAddressEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressControllerCreateOrUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all delivery addresses by userid for admin api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressControllerGetAllByUserId(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryAddressEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressControllerGetAllByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressControllerGetAllByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all delivery addresses by userid for user api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressControllerGetAllByUserIdForUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryAddressEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressControllerGetAllByUserIdForUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressControllerGetAllByUserIdForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete delivery addresses by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryAddressControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryAddressControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryAddressApi.deliveryAddressControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeliveryAddressApi - factory interface
 * @export
 */
export const DeliveryAddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryAddressApiFp(configuration)
    return {
        /**
         * Create or Update Delivery address
         * @summary 
         * @param {UpdateDeliveryAddressDto} updateDeliveryAddressDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto: UpdateDeliveryAddressDto, options?: any): AxiosPromise<DeliveryAddressEntity> {
            return localVarFp.deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all delivery addresses by userid for admin api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerGetAllByUserId(userId: string, options?: any): AxiosPromise<Array<DeliveryAddressEntity>> {
            return localVarFp.deliveryAddressControllerGetAllByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all delivery addresses by userid for user api
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerGetAllByUserIdForUser(userId: string, options?: any): AxiosPromise<Array<DeliveryAddressEntity>> {
            return localVarFp.deliveryAddressControllerGetAllByUserIdForUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete delivery addresses by id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryAddressControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deliveryAddressControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryAddressApi - object-oriented interface
 * @export
 * @class DeliveryAddressApi
 * @extends {BaseAPI}
 */
export class DeliveryAddressApi extends BaseAPI {
    /**
     * Create or Update Delivery address
     * @summary 
     * @param {UpdateDeliveryAddressDto} updateDeliveryAddressDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryAddressApi
     */
    public deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto: UpdateDeliveryAddressDto, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressControllerCreateOrUpdate(updateDeliveryAddressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all delivery addresses by userid for admin api
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryAddressApi
     */
    public deliveryAddressControllerGetAllByUserId(userId: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressControllerGetAllByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all delivery addresses by userid for user api
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryAddressApi
     */
    public deliveryAddressControllerGetAllByUserIdForUser(userId: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressControllerGetAllByUserIdForUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete delivery addresses by id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryAddressApi
     */
    public deliveryAddressControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return DeliveryAddressApiFp(this.configuration).deliveryAddressControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FabricDetailsApiApi - axios parameter creator
 * @export
 */
export const FabricDetailsApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerCreate: async (createFabricDto: CreateFabricDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFabricDto' is not null or undefined
            assertParamExists('fabricControllerCreate', 'createFabricDto', createFabricDto)
            const localVarPath = `/fabric-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFabricDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fabric-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fabricControllerFindOne', 'id', id)
            const localVarPath = `/fabric-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fabricControllerRemove', 'id', id)
            const localVarPath = `/fabric-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerUpdate: async (id: string, createFabricDto: CreateFabricDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fabricControllerUpdate', 'id', id)
            // verify required parameter 'createFabricDto' is not null or undefined
            assertParamExists('fabricControllerUpdate', 'createFabricDto', createFabricDto)
            const localVarPath = `/fabric-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFabricDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FabricDetailsApiApi - functional programming interface
 * @export
 */
export const FabricDetailsApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FabricDetailsApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fabricControllerCreate(createFabricDto: CreateFabricDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fabricControllerCreate(createFabricDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FabricDetailsApiApi.fabricControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fabricControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FabricDetailsEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fabricControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FabricDetailsApiApi.fabricControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fabricControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fabricControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FabricDetailsApiApi.fabricControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fabricControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fabricControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FabricDetailsApiApi.fabricControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fabricControllerUpdate(id: string, createFabricDto: CreateFabricDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fabricControllerUpdate(id, createFabricDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FabricDetailsApiApi.fabricControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FabricDetailsApiApi - factory interface
 * @export
 */
export const FabricDetailsApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FabricDetailsApiApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerCreate(createFabricDto: CreateFabricDto, options?: any): AxiosPromise<void> {
            return localVarFp.fabricControllerCreate(createFabricDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerFindAll(options?: any): AxiosPromise<Array<FabricDetailsEntity>> {
            return localVarFp.fabricControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fabricControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.fabricControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateFabricDto} createFabricDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fabricControllerUpdate(id: string, createFabricDto: CreateFabricDto, options?: any): AxiosPromise<void> {
            return localVarFp.fabricControllerUpdate(id, createFabricDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FabricDetailsApiApi - object-oriented interface
 * @export
 * @class FabricDetailsApiApi
 * @extends {BaseAPI}
 */
export class FabricDetailsApiApi extends BaseAPI {
    /**
     * 
     * @param {CreateFabricDto} createFabricDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricDetailsApiApi
     */
    public fabricControllerCreate(createFabricDto: CreateFabricDto, options?: RawAxiosRequestConfig) {
        return FabricDetailsApiApiFp(this.configuration).fabricControllerCreate(createFabricDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricDetailsApiApi
     */
    public fabricControllerFindAll(options?: RawAxiosRequestConfig) {
        return FabricDetailsApiApiFp(this.configuration).fabricControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricDetailsApiApi
     */
    public fabricControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return FabricDetailsApiApiFp(this.configuration).fabricControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricDetailsApiApi
     */
    public fabricControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return FabricDetailsApiApiFp(this.configuration).fabricControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateFabricDto} createFabricDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FabricDetailsApiApi
     */
    public fabricControllerUpdate(id: string, createFabricDto: CreateFabricDto, options?: RawAxiosRequestConfig) {
        return FabricDetailsApiApiFp(this.configuration).fabricControllerUpdate(id, createFabricDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ManufacturerApiApi - axios parameter creator
 * @export
 */
export const ManufacturerApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateManufacturerDto} createManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerCreate: async (createManufacturerDto: CreateManufacturerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createManufacturerDto' is not null or undefined
            assertParamExists('manufacturerControllerCreate', 'createManufacturerDto', createManufacturerDto)
            const localVarPath = `/manufacturer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createManufacturerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manufacturer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('manufacturerControllerFindOne', 'id', id)
            const localVarPath = `/manufacturer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('manufacturerControllerRemove', 'id', id)
            const localVarPath = `/manufacturer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateManufacturerDto} updateManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerUpdate: async (id: string, updateManufacturerDto: UpdateManufacturerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('manufacturerControllerUpdate', 'id', id)
            // verify required parameter 'updateManufacturerDto' is not null or undefined
            assertParamExists('manufacturerControllerUpdate', 'updateManufacturerDto', updateManufacturerDto)
            const localVarPath = `/manufacturer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateManufacturerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManufacturerApiApi - functional programming interface
 * @export
 */
export const ManufacturerApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManufacturerApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateManufacturerDto} createManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manufacturerControllerCreate(createManufacturerDto: CreateManufacturerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manufacturerControllerCreate(createManufacturerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManufacturerApiApi.manufacturerControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manufacturerControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManufacturerEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manufacturerControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManufacturerApiApi.manufacturerControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manufacturerControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manufacturerControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManufacturerApiApi.manufacturerControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manufacturerControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manufacturerControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManufacturerApiApi.manufacturerControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateManufacturerDto} updateManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manufacturerControllerUpdate(id: string, updateManufacturerDto: UpdateManufacturerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.manufacturerControllerUpdate(id, updateManufacturerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManufacturerApiApi.manufacturerControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManufacturerApiApi - factory interface
 * @export
 */
export const ManufacturerApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManufacturerApiApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateManufacturerDto} createManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerCreate(createManufacturerDto: CreateManufacturerDto, options?: any): AxiosPromise<void> {
            return localVarFp.manufacturerControllerCreate(createManufacturerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerFindAll(options?: any): AxiosPromise<Array<ManufacturerEntity>> {
            return localVarFp.manufacturerControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.manufacturerControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.manufacturerControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateManufacturerDto} updateManufacturerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manufacturerControllerUpdate(id: string, updateManufacturerDto: UpdateManufacturerDto, options?: any): AxiosPromise<void> {
            return localVarFp.manufacturerControllerUpdate(id, updateManufacturerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManufacturerApiApi - object-oriented interface
 * @export
 * @class ManufacturerApiApi
 * @extends {BaseAPI}
 */
export class ManufacturerApiApi extends BaseAPI {
    /**
     * 
     * @param {CreateManufacturerDto} createManufacturerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManufacturerApiApi
     */
    public manufacturerControllerCreate(createManufacturerDto: CreateManufacturerDto, options?: RawAxiosRequestConfig) {
        return ManufacturerApiApiFp(this.configuration).manufacturerControllerCreate(createManufacturerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManufacturerApiApi
     */
    public manufacturerControllerFindAll(options?: RawAxiosRequestConfig) {
        return ManufacturerApiApiFp(this.configuration).manufacturerControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManufacturerApiApi
     */
    public manufacturerControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return ManufacturerApiApiFp(this.configuration).manufacturerControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManufacturerApiApi
     */
    public manufacturerControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ManufacturerApiApiFp(this.configuration).manufacturerControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateManufacturerDto} updateManufacturerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManufacturerApiApi
     */
    public manufacturerControllerUpdate(id: string, updateManufacturerDto: UpdateManufacturerDto, options?: RawAxiosRequestConfig) {
        return ManufacturerApiApiFp(this.configuration).manufacturerControllerUpdate(id, updateManufacturerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApiApi - axios parameter creator
 * @export
 */
export const OrderApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCancelOrder: async (userId: string, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('orderControllerCancelOrder', 'userId', userId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderControllerCancelOrder', 'orderId', orderId)
            const localVarPath = `/order-details/cancel/{userId}/{orderId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCompleteCodOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order-details/admin/complete-cod-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * place an order
         * @summary 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreate: async (createOrderDto: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('orderControllerCreate', 'createOrderDto', createOrderDto)
            const localVarPath = `/order-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all orders for admin
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all orders for user (user api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAllByUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('orderControllerFindAllByUser', 'userId', userId)
            const localVarPath = `/order-details/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all orders for user (admin api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAllByUserId: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('orderControllerFindAllByUserId', 'userId', userId)
            const localVarPath = `/order-details/admin/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRejectOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/order-details/admin/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerReturnOrder: async (userId: string, orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('orderControllerReturnOrder', 'userId', userId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderControllerReturnOrder', 'orderId', orderId)
            const localVarPath = `/order-details/return/{userId}/{orderId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApiApi - functional programming interface
 * @export
 */
export const OrderApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCancelOrder(userId: string, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCancelOrder(userId, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerCancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCompleteCodOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCompleteCodOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerCompleteCodOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * place an order
         * @summary 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCreate(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCreate(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get all orders for admin
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get all orders for user (user api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerFindAllByUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerFindAllByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerFindAllByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get all orders for user (admin api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerFindAllByUserId(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerFindAllByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerFindAllByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerRejectOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerRejectOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerRejectOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerReturnOrder(userId: string, orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerReturnOrder(userId, orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApiApi.orderControllerReturnOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApiApi - factory interface
 * @export
 */
export const OrderApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCancelOrder(userId: string, orderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderControllerCancelOrder(userId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCompleteCodOrder(options?: any): AxiosPromise<void> {
            return localVarFp.orderControllerCompleteCodOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * place an order
         * @summary 
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreate(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<OrderResponse> {
            return localVarFp.orderControllerCreate(createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * get all orders for admin
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAll(options?: any): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.orderControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * get all orders for user (user api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAllByUser(userId: string, options?: any): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.orderControllerFindAllByUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * get all orders for user (admin api)
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerFindAllByUserId(userId: string, options?: any): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.orderControllerFindAllByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRejectOrder(options?: any): AxiosPromise<void> {
            return localVarFp.orderControllerRejectOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerReturnOrder(userId: string, orderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.orderControllerReturnOrder(userId, orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApiApi - object-oriented interface
 * @export
 * @class OrderApiApi
 * @extends {BaseAPI}
 */
export class OrderApiApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerCancelOrder(userId: string, orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerCancelOrder(userId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerCompleteCodOrder(options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerCompleteCodOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * place an order
     * @summary 
     * @param {CreateOrderDto} createOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerCreate(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerCreate(createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all orders for admin
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerFindAll(options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all orders for user (user api)
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerFindAllByUser(userId: string, options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerFindAllByUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all orders for user (admin api)
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerFindAllByUserId(userId: string, options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerFindAllByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerRejectOrder(options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerRejectOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userId 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiApi
     */
    public orderControllerReturnOrder(userId: string, orderId: string, options?: RawAxiosRequestConfig) {
        return OrderApiApiFp(this.configuration).orderControllerReturnOrder(userId, orderId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreate: async (createProductDto: CreateProductDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductDto' is not null or undefined
            assertParamExists('productControllerCreate', 'createProductDto', createProductDto)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} pagingRequired 
         * @param {number} page 
         * @param {number} limit 
         * @param {string} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFindAll: async (pagingRequired: boolean, page: number, limit: number, productTypeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pagingRequired' is not null or undefined
            assertParamExists('productControllerFindAll', 'pagingRequired', pagingRequired)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('productControllerFindAll', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('productControllerFindAll', 'limit', limit)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('productControllerFindAll', 'productTypeId', productTypeId)
            const localVarPath = `/product/{productTypeId}`
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pagingRequired !== undefined) {
                localVarQueryParameter['pagingRequired'] = pagingRequired;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFindOne: async (productTypeId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('productControllerFindOne', 'productTypeId', productTypeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productControllerFindOne', 'id', id)
            const localVarPath = `/product/{productTypeId}/{id}`
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerRemove: async (productTypeId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('productControllerRemove', 'productTypeId', productTypeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productControllerRemove', 'id', id)
            const localVarPath = `/product/{productTypeId}/{id}`
                .replace(`{${"productTypeId"}}`, encodeURIComponent(String(productTypeId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerCreate(createProductDto: CreateProductDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProductResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerCreate(createProductDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.productControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} pagingRequired 
         * @param {number} page 
         * @param {number} limit 
         * @param {string} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerFindAll(pagingRequired: boolean, page: number, limit: number, productTypeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SareeEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerFindAll(pagingRequired, page, limit, productTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.productControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerFindOne(productTypeId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSnapshotDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerFindOne(productTypeId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.productControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerRemove(productTypeId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerRemove(productTypeId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApi.productControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreate(createProductDto: CreateProductDto, options?: any): AxiosPromise<CreateProductResponseDto> {
            return localVarFp.productControllerCreate(createProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} pagingRequired 
         * @param {number} page 
         * @param {number} limit 
         * @param {string} productTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFindAll(pagingRequired: boolean, page: number, limit: number, productTypeId: string, options?: any): AxiosPromise<Array<SareeEntity>> {
            return localVarFp.productControllerFindAll(pagingRequired, page, limit, productTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFindOne(productTypeId: string, id: string, options?: any): AxiosPromise<ProductSnapshotDto> {
            return localVarFp.productControllerFindOne(productTypeId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productTypeId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerRemove(productTypeId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productControllerRemove(productTypeId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {CreateProductDto} createProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerCreate(createProductDto: CreateProductDto, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerCreate(createProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} pagingRequired 
     * @param {number} page 
     * @param {number} limit 
     * @param {string} productTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerFindAll(pagingRequired: boolean, page: number, limit: number, productTypeId: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerFindAll(pagingRequired, page, limit, productTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productTypeId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerFindOne(productTypeId: string, id: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerFindOne(productTypeId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productTypeId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerRemove(productTypeId: string, id: string, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerRemove(productTypeId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductCollectionApi - axios parameter creator
 * @export
 */
export const ProductCollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerCreate: async (createProductCollectionDto: CreateProductCollectionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductCollectionDto' is not null or undefined
            assertParamExists('productColelctionControllerCreate', 'createProductCollectionDto', createProductCollectionDto)
            const localVarPath = `/product-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductCollectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All product collection
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productColelctionControllerRemove', 'id', id)
            const localVarPath = `/product-collection/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerUpdate: async (createProductCollectionDto: CreateProductCollectionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductCollectionDto' is not null or undefined
            assertParamExists('productColelctionControllerUpdate', 'createProductCollectionDto', createProductCollectionDto)
            const localVarPath = `/product-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductCollectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCollectionApi - functional programming interface
 * @export
 */
export const ProductCollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductCollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Create product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColelctionControllerCreate(createProductCollectionDto: CreateProductCollectionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColelctionControllerCreate(createProductCollectionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCollectionApi.productColelctionControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All product collection
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColelctionControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductCollectionEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColelctionControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCollectionApi.productColelctionControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColelctionControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColelctionControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCollectionApi.productColelctionControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColelctionControllerUpdate(createProductCollectionDto: CreateProductCollectionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColelctionControllerUpdate(createProductCollectionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductCollectionApi.productColelctionControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductCollectionApi - factory interface
 * @export
 */
export const ProductCollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductCollectionApiFp(configuration)
    return {
        /**
         * Create product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerCreate(createProductCollectionDto: CreateProductCollectionDto, options?: any): AxiosPromise<void> {
            return localVarFp.productColelctionControllerCreate(createProductCollectionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All product collection
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerGetAll(options?: any): AxiosPromise<Array<ProductCollectionEntity>> {
            return localVarFp.productColelctionControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productColelctionControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product collection
         * @summary 
         * @param {CreateProductCollectionDto} createProductCollectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColelctionControllerUpdate(createProductCollectionDto: CreateProductCollectionDto, options?: any): AxiosPromise<void> {
            return localVarFp.productColelctionControllerUpdate(createProductCollectionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductCollectionApi - object-oriented interface
 * @export
 * @class ProductCollectionApi
 * @extends {BaseAPI}
 */
export class ProductCollectionApi extends BaseAPI {
    /**
     * Create product collection
     * @summary 
     * @param {CreateProductCollectionDto} createProductCollectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public productColelctionControllerCreate(createProductCollectionDto: CreateProductCollectionDto, options?: RawAxiosRequestConfig) {
        return ProductCollectionApiFp(this.configuration).productColelctionControllerCreate(createProductCollectionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All product collection
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public productColelctionControllerGetAll(options?: RawAxiosRequestConfig) {
        return ProductCollectionApiFp(this.configuration).productColelctionControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public productColelctionControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductCollectionApiFp(this.configuration).productColelctionControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product collection
     * @summary 
     * @param {CreateProductCollectionDto} createProductCollectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCollectionApi
     */
    public productColelctionControllerUpdate(createProductCollectionDto: CreateProductCollectionDto, options?: RawAxiosRequestConfig) {
        return ProductCollectionApiFp(this.configuration).productColelctionControllerUpdate(createProductCollectionDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductColorApi - axios parameter creator
 * @export
 */
export const ProductColorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerCreate: async (createProductColorDto: CreateProductColorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductColorDto' is not null or undefined
            assertParamExists('productColorControllerCreate', 'createProductColorDto', createProductColorDto)
            const localVarPath = `/product-color`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductColorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All product colors
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-color`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productColorControllerRemove', 'id', id)
            const localVarPath = `/product-color/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerUpdate: async (createProductColorDto: CreateProductColorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductColorDto' is not null or undefined
            assertParamExists('productColorControllerUpdate', 'createProductColorDto', createProductColorDto)
            const localVarPath = `/product-color`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductColorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductColorApi - functional programming interface
 * @export
 */
export const ProductColorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductColorApiAxiosParamCreator(configuration)
    return {
        /**
         * Create product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColorControllerCreate(createProductColorDto: CreateProductColorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColorControllerCreate(createProductColorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductColorApi.productColorControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All product colors
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColorControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductColorEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColorControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductColorApi.productColorControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColorControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColorControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductColorApi.productColorControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productColorControllerUpdate(createProductColorDto: CreateProductColorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productColorControllerUpdate(createProductColorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductColorApi.productColorControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductColorApi - factory interface
 * @export
 */
export const ProductColorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductColorApiFp(configuration)
    return {
        /**
         * Create product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerCreate(createProductColorDto: CreateProductColorDto, options?: any): AxiosPromise<void> {
            return localVarFp.productColorControllerCreate(createProductColorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All product colors
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerGetAll(options?: any): AxiosPromise<Array<ProductColorEntity>> {
            return localVarFp.productColorControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productColorControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product colors
         * @summary 
         * @param {CreateProductColorDto} createProductColorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productColorControllerUpdate(createProductColorDto: CreateProductColorDto, options?: any): AxiosPromise<void> {
            return localVarFp.productColorControllerUpdate(createProductColorDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductColorApi - object-oriented interface
 * @export
 * @class ProductColorApi
 * @extends {BaseAPI}
 */
export class ProductColorApi extends BaseAPI {
    /**
     * Create product colors
     * @summary 
     * @param {CreateProductColorDto} createProductColorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductColorApi
     */
    public productColorControllerCreate(createProductColorDto: CreateProductColorDto, options?: RawAxiosRequestConfig) {
        return ProductColorApiFp(this.configuration).productColorControllerCreate(createProductColorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All product colors
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductColorApi
     */
    public productColorControllerGetAll(options?: RawAxiosRequestConfig) {
        return ProductColorApiFp(this.configuration).productColorControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductColorApi
     */
    public productColorControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductColorApiFp(this.configuration).productColorControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product colors
     * @summary 
     * @param {CreateProductColorDto} createProductColorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductColorApi
     */
    public productColorControllerUpdate(createProductColorDto: CreateProductColorDto, options?: RawAxiosRequestConfig) {
        return ProductColorApiFp(this.configuration).productColorControllerUpdate(createProductColorDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductImageApiApi - axios parameter creator
 * @export
 */
export const ProductImageApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} imageDescription 
         * @param {string} productId 
         * @param {string} productTypeId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productImageControllerUploadProductImage: async (imageDescription: string, productId: string, productTypeId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageDescription' is not null or undefined
            assertParamExists('productImageControllerUploadProductImage', 'imageDescription', imageDescription)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('productImageControllerUploadProductImage', 'productId', productId)
            // verify required parameter 'productTypeId' is not null or undefined
            assertParamExists('productImageControllerUploadProductImage', 'productTypeId', productTypeId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('productImageControllerUploadProductImage', 'file', file)
            const localVarPath = `/product-image/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (imageDescription !== undefined) { 
                localVarFormParams.append('imageDescription', imageDescription as any);
            }
    
            if (productId !== undefined) { 
                localVarFormParams.append('productId', productId as any);
            }
    
            if (productTypeId !== undefined) { 
                localVarFormParams.append('productTypeId', productTypeId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductImageApiApi - functional programming interface
 * @export
 */
export const ProductImageApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductImageApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} imageDescription 
         * @param {string} productId 
         * @param {string} productTypeId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productImageControllerUploadProductImage(imageDescription: string, productId: string, productTypeId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SareeImageEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productImageControllerUploadProductImage(imageDescription, productId, productTypeId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductImageApiApi.productImageControllerUploadProductImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductImageApiApi - factory interface
 * @export
 */
export const ProductImageApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductImageApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} imageDescription 
         * @param {string} productId 
         * @param {string} productTypeId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productImageControllerUploadProductImage(imageDescription: string, productId: string, productTypeId: string, file: File, options?: any): AxiosPromise<SareeImageEntity> {
            return localVarFp.productImageControllerUploadProductImage(imageDescription, productId, productTypeId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductImageApiApi - object-oriented interface
 * @export
 * @class ProductImageApiApi
 * @extends {BaseAPI}
 */
export class ProductImageApiApi extends BaseAPI {
    /**
     * 
     * @param {string} imageDescription 
     * @param {string} productId 
     * @param {string} productTypeId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductImageApiApi
     */
    public productImageControllerUploadProductImage(imageDescription: string, productId: string, productTypeId: string, file: File, options?: RawAxiosRequestConfig) {
        return ProductImageApiApiFp(this.configuration).productImageControllerUploadProductImage(imageDescription, productId, productTypeId, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductOccassionApi - axios parameter creator
 * @export
 */
export const ProductOccassionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerCreate: async (createProductOccassionDto: CreateProductOccassionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductOccassionDto' is not null or undefined
            assertParamExists('productOccassionControllerCreate', 'createProductOccassionDto', createProductOccassionDto)
            const localVarPath = `/product-occassion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductOccassionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All product Occaasions
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-occassion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productOccassionControllerRemove', 'id', id)
            const localVarPath = `/product-occassion/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerUpdate: async (createProductOccassionDto: CreateProductOccassionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductOccassionDto' is not null or undefined
            assertParamExists('productOccassionControllerUpdate', 'createProductOccassionDto', createProductOccassionDto)
            const localVarPath = `/product-occassion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductOccassionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductOccassionApi - functional programming interface
 * @export
 */
export const ProductOccassionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductOccassionApiAxiosParamCreator(configuration)
    return {
        /**
         * Create product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productOccassionControllerCreate(createProductOccassionDto: CreateProductOccassionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productOccassionControllerCreate(createProductOccassionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductOccassionApi.productOccassionControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All product Occaasions
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productOccassionControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOccassionEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productOccassionControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductOccassionApi.productOccassionControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productOccassionControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productOccassionControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductOccassionApi.productOccassionControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productOccassionControllerUpdate(createProductOccassionDto: CreateProductOccassionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productOccassionControllerUpdate(createProductOccassionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductOccassionApi.productOccassionControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductOccassionApi - factory interface
 * @export
 */
export const ProductOccassionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductOccassionApiFp(configuration)
    return {
        /**
         * Create product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerCreate(createProductOccassionDto: CreateProductOccassionDto, options?: any): AxiosPromise<void> {
            return localVarFp.productOccassionControllerCreate(createProductOccassionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All product Occaasions
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerGetAll(options?: any): AxiosPromise<Array<ProductOccassionEntity>> {
            return localVarFp.productOccassionControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productOccassionControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product Occaasions
         * @summary 
         * @param {CreateProductOccassionDto} createProductOccassionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productOccassionControllerUpdate(createProductOccassionDto: CreateProductOccassionDto, options?: any): AxiosPromise<void> {
            return localVarFp.productOccassionControllerUpdate(createProductOccassionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductOccassionApi - object-oriented interface
 * @export
 * @class ProductOccassionApi
 * @extends {BaseAPI}
 */
export class ProductOccassionApi extends BaseAPI {
    /**
     * Create product Occaasions
     * @summary 
     * @param {CreateProductOccassionDto} createProductOccassionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOccassionApi
     */
    public productOccassionControllerCreate(createProductOccassionDto: CreateProductOccassionDto, options?: RawAxiosRequestConfig) {
        return ProductOccassionApiFp(this.configuration).productOccassionControllerCreate(createProductOccassionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All product Occaasions
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOccassionApi
     */
    public productOccassionControllerGetAll(options?: RawAxiosRequestConfig) {
        return ProductOccassionApiFp(this.configuration).productOccassionControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOccassionApi
     */
    public productOccassionControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductOccassionApiFp(this.configuration).productOccassionControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product Occaasions
     * @summary 
     * @param {CreateProductOccassionDto} createProductOccassionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOccassionApi
     */
    public productOccassionControllerUpdate(createProductOccassionDto: CreateProductOccassionDto, options?: RawAxiosRequestConfig) {
        return ProductOccassionApiFp(this.configuration).productOccassionControllerUpdate(createProductOccassionDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductPrintsApi - axios parameter creator
 * @export
 */
export const ProductPrintsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create product Print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerCreate: async (createProductPrintDto: CreateProductPrintDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductPrintDto' is not null or undefined
            assertParamExists('productPrintsControllerCreate', 'createProductPrintDto', createProductPrintDto)
            const localVarPath = `/product-prints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductPrintDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All product prints
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-prints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productPrintsControllerRemove', 'id', id)
            const localVarPath = `/product-prints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerUpdate: async (createProductPrintDto: CreateProductPrintDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductPrintDto' is not null or undefined
            assertParamExists('productPrintsControllerUpdate', 'createProductPrintDto', createProductPrintDto)
            const localVarPath = `/product-prints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductPrintDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductPrintsApi - functional programming interface
 * @export
 */
export const ProductPrintsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductPrintsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create product Print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPrintsControllerCreate(createProductPrintDto: CreateProductPrintDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPrintsControllerCreate(createProductPrintDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPrintsApi.productPrintsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All product prints
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPrintsControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductPrintsEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPrintsControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPrintsApi.productPrintsControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPrintsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPrintsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPrintsApi.productPrintsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productPrintsControllerUpdate(createProductPrintDto: CreateProductPrintDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productPrintsControllerUpdate(createProductPrintDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductPrintsApi.productPrintsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductPrintsApi - factory interface
 * @export
 */
export const ProductPrintsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductPrintsApiFp(configuration)
    return {
        /**
         * Create product Print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerCreate(createProductPrintDto: CreateProductPrintDto, options?: any): AxiosPromise<void> {
            return localVarFp.productPrintsControllerCreate(createProductPrintDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All product prints
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerGetAll(options?: any): AxiosPromise<Array<ProductPrintsEntity>> {
            return localVarFp.productPrintsControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productPrintsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product print
         * @summary 
         * @param {CreateProductPrintDto} createProductPrintDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productPrintsControllerUpdate(createProductPrintDto: CreateProductPrintDto, options?: any): AxiosPromise<void> {
            return localVarFp.productPrintsControllerUpdate(createProductPrintDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductPrintsApi - object-oriented interface
 * @export
 * @class ProductPrintsApi
 * @extends {BaseAPI}
 */
export class ProductPrintsApi extends BaseAPI {
    /**
     * Create product Print
     * @summary 
     * @param {CreateProductPrintDto} createProductPrintDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPrintsApi
     */
    public productPrintsControllerCreate(createProductPrintDto: CreateProductPrintDto, options?: RawAxiosRequestConfig) {
        return ProductPrintsApiFp(this.configuration).productPrintsControllerCreate(createProductPrintDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All product prints
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPrintsApi
     */
    public productPrintsControllerGetAll(options?: RawAxiosRequestConfig) {
        return ProductPrintsApiFp(this.configuration).productPrintsControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPrintsApi
     */
    public productPrintsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductPrintsApiFp(this.configuration).productPrintsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product print
     * @summary 
     * @param {CreateProductPrintDto} createProductPrintDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPrintsApi
     */
    public productPrintsControllerUpdate(createProductPrintDto: CreateProductPrintDto, options?: RawAxiosRequestConfig) {
        return ProductPrintsApiFp(this.configuration).productPrintsControllerUpdate(createProductPrintDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductStyleApi - axios parameter creator
 * @export
 */
export const ProductStyleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerCreate: async (createProductStyleDto: CreateProductStyleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductStyleDto' is not null or undefined
            assertParamExists('productStyleControllerCreate', 'createProductStyleDto', createProductStyleDto)
            const localVarPath = `/product-style`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductStyleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All product styles
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-style`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productStyleControllerRemove', 'id', id)
            const localVarPath = `/product-style/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerUpdate: async (createProductStyleDto: CreateProductStyleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductStyleDto' is not null or undefined
            assertParamExists('productStyleControllerUpdate', 'createProductStyleDto', createProductStyleDto)
            const localVarPath = `/product-style`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductStyleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductStyleApi - functional programming interface
 * @export
 */
export const ProductStyleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductStyleApiAxiosParamCreator(configuration)
    return {
        /**
         * Create product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productStyleControllerCreate(createProductStyleDto: CreateProductStyleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productStyleControllerCreate(createProductStyleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductStyleApi.productStyleControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All product styles
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productStyleControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductStyleEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productStyleControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductStyleApi.productStyleControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productStyleControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productStyleControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductStyleApi.productStyleControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productStyleControllerUpdate(createProductStyleDto: CreateProductStyleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productStyleControllerUpdate(createProductStyleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductStyleApi.productStyleControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductStyleApi - factory interface
 * @export
 */
export const ProductStyleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductStyleApiFp(configuration)
    return {
        /**
         * Create product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerCreate(createProductStyleDto: CreateProductStyleDto, options?: any): AxiosPromise<void> {
            return localVarFp.productStyleControllerCreate(createProductStyleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All product styles
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerGetAll(options?: any): AxiosPromise<Array<ProductStyleEntity>> {
            return localVarFp.productStyleControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productStyleControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product Style
         * @summary 
         * @param {CreateProductStyleDto} createProductStyleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productStyleControllerUpdate(createProductStyleDto: CreateProductStyleDto, options?: any): AxiosPromise<void> {
            return localVarFp.productStyleControllerUpdate(createProductStyleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductStyleApi - object-oriented interface
 * @export
 * @class ProductStyleApi
 * @extends {BaseAPI}
 */
export class ProductStyleApi extends BaseAPI {
    /**
     * Create product Style
     * @summary 
     * @param {CreateProductStyleDto} createProductStyleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStyleApi
     */
    public productStyleControllerCreate(createProductStyleDto: CreateProductStyleDto, options?: RawAxiosRequestConfig) {
        return ProductStyleApiFp(this.configuration).productStyleControllerCreate(createProductStyleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All product styles
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStyleApi
     */
    public productStyleControllerGetAll(options?: RawAxiosRequestConfig) {
        return ProductStyleApiFp(this.configuration).productStyleControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStyleApi
     */
    public productStyleControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductStyleApiFp(this.configuration).productStyleControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product Style
     * @summary 
     * @param {CreateProductStyleDto} createProductStyleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductStyleApi
     */
    public productStyleControllerUpdate(createProductStyleDto: CreateProductStyleDto, options?: RawAxiosRequestConfig) {
        return ProductStyleApiFp(this.configuration).productStyleControllerUpdate(createProductStyleDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTypeApi - axios parameter creator
 * @export
 */
export const ProductTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Product Type
         * @summary 
         * @param {CreateProductTypeDto} createProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerCreate: async (createProductTypeDto: CreateProductTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductTypeDto' is not null or undefined
            assertParamExists('productTypeControllerCreate', 'createProductTypeDto', createProductTypeDto)
            const localVarPath = `/product-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All Product Types
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productTypeControllerFindOne', 'id', id)
            const localVarPath = `/product-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Product Type
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productTypeControllerRemove', 'id', id)
            const localVarPath = `/product-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {UpdateProductTypeDto} updateProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerUpdate: async (id: string, updateProductTypeDto: UpdateProductTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productTypeControllerUpdate', 'id', id)
            // verify required parameter 'updateProductTypeDto' is not null or undefined
            assertParamExists('productTypeControllerUpdate', 'updateProductTypeDto', updateProductTypeDto)
            const localVarPath = `/product-type/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTypeApi - functional programming interface
 * @export
 */
export const ProductTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Product Type
         * @summary 
         * @param {CreateProductTypeDto} createProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productTypeControllerCreate(createProductTypeDto: CreateProductTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productTypeControllerCreate(createProductTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.productTypeControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get All Product Types
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productTypeControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductTypeEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productTypeControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.productTypeControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productTypeControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productTypeControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.productTypeControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Product Type
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productTypeControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productTypeControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.productTypeControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {UpdateProductTypeDto} updateProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productTypeControllerUpdate(id: string, updateProductTypeDto: UpdateProductTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productTypeControllerUpdate(id, updateProductTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductTypeApi.productTypeControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductTypeApi - factory interface
 * @export
 */
export const ProductTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTypeApiFp(configuration)
    return {
        /**
         * Create Product Type
         * @summary 
         * @param {CreateProductTypeDto} createProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerCreate(createProductTypeDto: CreateProductTypeDto, options?: any): AxiosPromise<void> {
            return localVarFp.productTypeControllerCreate(createProductTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All Product Types
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerFindAll(options?: any): AxiosPromise<Array<ProductTypeEntity>> {
            return localVarFp.productTypeControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Get Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productTypeControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Product Type
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.productTypeControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Product Type by Id
         * @summary 
         * @param {string} id 
         * @param {UpdateProductTypeDto} updateProductTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productTypeControllerUpdate(id: string, updateProductTypeDto: UpdateProductTypeDto, options?: any): AxiosPromise<void> {
            return localVarFp.productTypeControllerUpdate(id, updateProductTypeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductTypeApi - object-oriented interface
 * @export
 * @class ProductTypeApi
 * @extends {BaseAPI}
 */
export class ProductTypeApi extends BaseAPI {
    /**
     * Create Product Type
     * @summary 
     * @param {CreateProductTypeDto} createProductTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public productTypeControllerCreate(createProductTypeDto: CreateProductTypeDto, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).productTypeControllerCreate(createProductTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get All Product Types
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public productTypeControllerFindAll(options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).productTypeControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Product Type by Id
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public productTypeControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).productTypeControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Product Type
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public productTypeControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).productTypeControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Product Type by Id
     * @summary 
     * @param {string} id 
     * @param {UpdateProductTypeDto} updateProductTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypeApi
     */
    public productTypeControllerUpdate(id: string, updateProductTypeDto: UpdateProductTypeDto, options?: RawAxiosRequestConfig) {
        return ProductTypeApiFp(this.configuration).productTypeControllerUpdate(id, updateProductTypeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromoDetailsApi - axios parameter creator
 * @export
 */
export const PromoDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Promo details
         * @summary 
         * @param {CreatePromoDto} createPromoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerCreateOrupdate: async (createPromoDto: CreatePromoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPromoDto' is not null or undefined
            assertParamExists('promoDetailsControllerCreateOrupdate', 'createPromoDto', createPromoDto)
            const localVarPath = `/promo-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPromoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Promo details
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerGetAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promo-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promoDetailsControllerRemove', 'id', id)
            const localVarPath = `/promo-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromoDetailsApi - functional programming interface
 * @export
 */
export const PromoDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromoDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Promo details
         * @summary 
         * @param {CreatePromoDto} createPromoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoDetailsControllerCreateOrupdate(createPromoDto: CreatePromoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoDetailsControllerCreateOrupdate(createPromoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromoDetailsApi.promoDetailsControllerCreateOrupdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all Promo details
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoDetailsControllerGetAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PromoDetailsEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoDetailsControllerGetAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromoDetailsApi.promoDetailsControllerGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoDetailsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoDetailsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromoDetailsApi.promoDetailsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromoDetailsApi - factory interface
 * @export
 */
export const PromoDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromoDetailsApiFp(configuration)
    return {
        /**
         * Create Promo details
         * @summary 
         * @param {CreatePromoDto} createPromoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerCreateOrupdate(createPromoDto: CreatePromoDto, options?: any): AxiosPromise<void> {
            return localVarFp.promoDetailsControllerCreateOrupdate(createPromoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Promo details
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerGetAll(options?: any): AxiosPromise<Array<PromoDetailsEntity>> {
            return localVarFp.promoDetailsControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoDetailsControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.promoDetailsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromoDetailsApi - object-oriented interface
 * @export
 * @class PromoDetailsApi
 * @extends {BaseAPI}
 */
export class PromoDetailsApi extends BaseAPI {
    /**
     * Create Promo details
     * @summary 
     * @param {CreatePromoDto} createPromoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoDetailsApi
     */
    public promoDetailsControllerCreateOrupdate(createPromoDto: CreatePromoDto, options?: RawAxiosRequestConfig) {
        return PromoDetailsApiFp(this.configuration).promoDetailsControllerCreateOrupdate(createPromoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Promo details
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoDetailsApi
     */
    public promoDetailsControllerGetAll(options?: RawAxiosRequestConfig) {
        return PromoDetailsApiFp(this.configuration).promoDetailsControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromoDetailsApi
     */
    public promoDetailsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return PromoDetailsApiFp(this.configuration).promoDetailsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubcategoryApi - axios parameter creator
 * @export
 */
export const SubcategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create SubCategory
         * @summary 
         * @param {CreateSubcategoryDto} createSubcategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerCreate: async (createSubcategoryDto: CreateSubcategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSubcategoryDto' is not null or undefined
            assertParamExists('subcategoryControllerCreate', 'createSubcategoryDto', createSubcategoryDto)
            const localVarPath = `/subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSubcategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch All SubCategories by category
         * @summary 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindAllByCategory: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('subcategoryControllerFindAllByCategory', 'categoryId', categoryId)
            const localVarPath = `/subcategory/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subcategoryControllerFindOne', 'id', id)
            const localVarPath = `/subcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subcategoryControllerRemove', 'id', id)
            const localVarPath = `/subcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a subcategory
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subcategoryControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subcategoryControllerUpdate', 'body', body)
            const localVarPath = `/subcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubcategoryApi - functional programming interface
 * @export
 */
export const SubcategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubcategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Create SubCategory
         * @summary 
         * @param {CreateSubcategoryDto} createSubcategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerCreate(createSubcategoryDto: CreateSubcategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerCreate(createSubcategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubcategoryEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch All SubCategories by category
         * @summary 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerFindAllByCategory(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubcategoryEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerFindAllByCategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerFindAllByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a subcategory
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subcategoryControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subcategoryControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubcategoryApi.subcategoryControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubcategoryApi - factory interface
 * @export
 */
export const SubcategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubcategoryApiFp(configuration)
    return {
        /**
         * Create SubCategory
         * @summary 
         * @param {CreateSubcategoryDto} createSubcategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerCreate(createSubcategoryDto: CreateSubcategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.subcategoryControllerCreate(createSubcategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindAll(options?: any): AxiosPromise<Array<SubcategoryEntity>> {
            return localVarFp.subcategoryControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch All SubCategories by category
         * @summary 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindAllByCategory(categoryId: string, options?: any): AxiosPromise<Array<SubcategoryEntity>> {
            return localVarFp.subcategoryControllerFindAllByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch All SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.subcategoryControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a SubCategories
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.subcategoryControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a subcategory
         * @summary 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subcategoryControllerUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.subcategoryControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubcategoryApi - object-oriented interface
 * @export
 * @class SubcategoryApi
 * @extends {BaseAPI}
 */
export class SubcategoryApi extends BaseAPI {
    /**
     * Create SubCategory
     * @summary 
     * @param {CreateSubcategoryDto} createSubcategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerCreate(createSubcategoryDto: CreateSubcategoryDto, options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerCreate(createSubcategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch All SubCategories
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerFindAll(options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch All SubCategories by category
     * @summary 
     * @param {string} categoryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerFindAllByCategory(categoryId: string, options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerFindAllByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch All SubCategories
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a SubCategories
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a subcategory
     * @summary 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubcategoryApi
     */
    public subcategoryControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return SubcategoryApiFp(this.configuration).subcategoryControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the user list for admin usage
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAllUsersForAdmin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/admin/get-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the user details for user portal
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerFindOne', 'id', id)
            const localVarPath = `/user/user-details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the user details for user portal using supplied token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetailsByToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers an user with email,name and date of birth,sex.
         * @summary 
         * @param {RegisterEmailPasswordDto} registerEmailPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRegisterUsingEmailAndPassword: async (registerEmailPasswordDto: RegisterEmailPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerEmailPasswordDto' is not null or undefined
            assertParamExists('userControllerRegisterUsingEmailAndPassword', 'registerEmailPasswordDto', registerEmailPasswordDto)
            const localVarPath = `/user/register/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerEmailPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerRemove', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the user details for user portal
         * @summary 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the user list for admin usage
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindAllUsersForAdmin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindAllUsersForAdmin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerFindAllUsersForAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the user details for user portal
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return the user details for user portal using supplied token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserDetailsByToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserDetailsByToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetUserDetailsByToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registers an user with email,name and date of birth,sex.
         * @summary 
         * @param {RegisterEmailPasswordDto} registerEmailPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto: RegisterEmailPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerRegisterUsingEmailAndPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the user details for user portal
         * @summary 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Return the user list for admin usage
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAllUsersForAdmin(options?: any): AxiosPromise<Array<UserEntity>> {
            return localVarFp.userControllerFindAllUsersForAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * Return the user details for user portal
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne(id: string, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the user details for user portal using supplied token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserDetailsByToken(options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerGetUserDetailsByToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Registers an user with email,name and date of birth,sex.
         * @summary 
         * @param {RegisterEmailPasswordDto} registerEmailPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto: RegisterEmailPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.userControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the user details for user portal
         * @summary 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerUpdate(updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Return the user list for admin usage
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindAllUsersForAdmin(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindAllUsersForAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the user details for user portal
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the user details for user portal using supplied token
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUserDetailsByToken(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetUserDetailsByToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers an user with email,name and date of birth,sex.
     * @summary 
     * @param {RegisterEmailPasswordDto} registerEmailPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto: RegisterEmailPasswordDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerRegisterUsingEmailAndPassword(registerEmailPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the user details for user portal
     * @summary 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdate(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdate(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserAuthApi - axios parameter creator
 * @export
 */
export const UserAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * logout user
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerLogoutUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-auth/log-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * refresh token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerRefreshToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signin using email and password
         * @summary 
         * @param {EmailAuthDto} emailAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerSigninUsingEmailAndPassword: async (emailAuthDto: EmailAuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailAuthDto' is not null or undefined
            assertParamExists('userAuthControllerSigninUsingEmailAndPassword', 'emailAuthDto', emailAuthDto)
            const localVarPath = `/user-auth/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAuthApi - functional programming interface
 * @export
 */
export const UserAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * logout user
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthControllerLogoutUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthControllerLogoutUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAuthApi.userAuthControllerLogoutUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * refresh token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthControllerRefreshToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthControllerRefreshToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAuthApi.userAuthControllerRefreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Signin using email and password
         * @summary 
         * @param {EmailAuthDto} emailAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAuthControllerSigninUsingEmailAndPassword(emailAuthDto: EmailAuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAuthControllerSigninUsingEmailAndPassword(emailAuthDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAuthApi.userAuthControllerSigninUsingEmailAndPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserAuthApi - factory interface
 * @export
 */
export const UserAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAuthApiFp(configuration)
    return {
        /**
         * logout user
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerLogoutUser(options?: any): AxiosPromise<void> {
            return localVarFp.userAuthControllerLogoutUser(options).then((request) => request(axios, basePath));
        },
        /**
         * refresh token
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerRefreshToken(options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.userAuthControllerRefreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Signin using email and password
         * @summary 
         * @param {EmailAuthDto} emailAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAuthControllerSigninUsingEmailAndPassword(emailAuthDto: EmailAuthDto, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.userAuthControllerSigninUsingEmailAndPassword(emailAuthDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAuthApi - object-oriented interface
 * @export
 * @class UserAuthApi
 * @extends {BaseAPI}
 */
export class UserAuthApi extends BaseAPI {
    /**
     * logout user
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthApi
     */
    public userAuthControllerLogoutUser(options?: RawAxiosRequestConfig) {
        return UserAuthApiFp(this.configuration).userAuthControllerLogoutUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * refresh token
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthApi
     */
    public userAuthControllerRefreshToken(options?: RawAxiosRequestConfig) {
        return UserAuthApiFp(this.configuration).userAuthControllerRefreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signin using email and password
     * @summary 
     * @param {EmailAuthDto} emailAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthApi
     */
    public userAuthControllerSigninUsingEmailAndPassword(emailAuthDto: EmailAuthDto, options?: RawAxiosRequestConfig) {
        return UserAuthApiFp(this.configuration).userAuthControllerSigninUsingEmailAndPassword(emailAuthDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WishListApi - axios parameter creator
 * @export
 */
export const WishListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * AddToWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerAddToWishList: async (wishListUpdateDto: WishListUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishListUpdateDto' is not null or undefined
            assertParamExists('wishListControllerAddToWishList', 'wishListUpdateDto', wishListUpdateDto)
            const localVarPath = `/wish-list/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wishListUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * WishList Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerGetWishListByUserId: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('wishListControllerGetWishListByUserId', 'userId', userId)
            const localVarPath = `/wish-list/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RemoveFromWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerRemoveFrom: async (wishListUpdateDto: WishListUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wishListUpdateDto' is not null or undefined
            assertParamExists('wishListControllerRemoveFrom', 'wishListUpdateDto', wishListUpdateDto)
            const localVarPath = `/wish-list/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wishListUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WishListApi - functional programming interface
 * @export
 */
export const WishListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WishListApiAxiosParamCreator(configuration)
    return {
        /**
         * AddToWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishListControllerAddToWishList(wishListUpdateDto: WishListUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishListDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishListControllerAddToWishList(wishListUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishListApi.wishListControllerAddToWishList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * WishList Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishListControllerGetWishListByUserId(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishListDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishListControllerGetWishListByUserId(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishListApi.wishListControllerGetWishListByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * RemoveFromWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wishListControllerRemoveFrom(wishListUpdateDto: WishListUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishListDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wishListControllerRemoveFrom(wishListUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WishListApi.wishListControllerRemoveFrom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WishListApi - factory interface
 * @export
 */
export const WishListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WishListApiFp(configuration)
    return {
        /**
         * AddToWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerAddToWishList(wishListUpdateDto: WishListUpdateDto, options?: any): AxiosPromise<WishListDetailsResponse> {
            return localVarFp.wishListControllerAddToWishList(wishListUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * WishList Response by userid
         * @summary 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerGetWishListByUserId(userId: string, options?: any): AxiosPromise<WishListDetailsResponse> {
            return localVarFp.wishListControllerGetWishListByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * RemoveFromWishList
         * @summary 
         * @param {WishListUpdateDto} wishListUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wishListControllerRemoveFrom(wishListUpdateDto: WishListUpdateDto, options?: any): AxiosPromise<WishListDetailsResponse> {
            return localVarFp.wishListControllerRemoveFrom(wishListUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WishListApi - object-oriented interface
 * @export
 * @class WishListApi
 * @extends {BaseAPI}
 */
export class WishListApi extends BaseAPI {
    /**
     * AddToWishList
     * @summary 
     * @param {WishListUpdateDto} wishListUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishListApi
     */
    public wishListControllerAddToWishList(wishListUpdateDto: WishListUpdateDto, options?: RawAxiosRequestConfig) {
        return WishListApiFp(this.configuration).wishListControllerAddToWishList(wishListUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * WishList Response by userid
     * @summary 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishListApi
     */
    public wishListControllerGetWishListByUserId(userId: string, options?: RawAxiosRequestConfig) {
        return WishListApiFp(this.configuration).wishListControllerGetWishListByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RemoveFromWishList
     * @summary 
     * @param {WishListUpdateDto} wishListUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishListApi
     */
    public wishListControllerRemoveFrom(wishListUpdateDto: WishListUpdateDto, options?: RawAxiosRequestConfig) {
        return WishListApiFp(this.configuration).wishListControllerRemoveFrom(wishListUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



